{"version":3,"sources":["components/button.js","components/SliderImage.js","App.js","serviceWorker.js","index.js"],"names":["Button","this","props","update","returnValue","react_default","a","createElement","className","buttonClass","onClick","spin","bind","value","Component","SliderImage","src","image","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","left","moving","animation","_this2","sliderList","document","getElementsByClassName","setInterval","setState","updateDirection","move","getNextPosition","setNewPosition","_this3","style","setTimeout","callback","_this4","components_SliderImage","components_button","updateSlider","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21cd2772.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Button extends Component {\r\n  spin() {\r\n    this.props.update(this.props.returnValue);\r\n  }\r\n  render() {\r\n    return (\r\n      <span className={this.props.buttonClass} onClick={this.spin.bind(this)}>\r\n        {this.props.value}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\n\r\nclass SliderImage extends Component {\r\n  render() {\r\n    return (\r\n      <li className=\"slider-item\">\r\n        <img src={this.props.image} className=\"slider-image\" />\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SliderImage;\r\n","import Button from \"./components/button\";\nimport React, { Component } from \"react\";\nimport SliderImage from \"./components/SliderImage\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { left: -40, moving: true, animation: false };\n  }\n\n  componentDidMount() {\n    this.sliderList = document.getElementsByClassName(\"slider-list\")[0];\n    setInterval(() => {\n      if (this.state.animation === false) {\n        this.setState({ animation: true }, () => {\n          this.updateDirection(() => {\n            let move;\n            move = this.getNextPosition();\n            this.setNewPosition(move);\n          });\n        });\n      }\n    }, 3000);\n  }\n\n  setNewPosition(move) {\n    this.setState({ left: move }, () => {\n      this.sliderList.style.left = this.state.left + \"px\";\n      setTimeout(() => {\n        this.setState({ animation: false });\n      }, 2000);\n    });\n  }\n\n  updateDirection(callback) {\n    if (this.state.left <= -2100) {\n      this.setState({ moving: false }, callback);\n    } else if (this.state.left >= -40) {\n      this.setState({ moving: true }, callback);\n    } else {\n      callback();\n    }\n  }\n\n  getNextPosition() {\n    let move;\n    if (this.state.moving) {\n      move = this.state.left - 700;\n    } else {\n      move = this.state.left + 700;\n    }\n    return move;\n  }\n\n  updateSlider(value) {\n    if (value === \"-\") {\n      if (this.state.animation === false) {\n        if (this.state.left <= -740) {\n          this.setState({ animation: true }, () => {\n            let move = this.state.left + 700;\n            this.setNewPosition(move);\n          });\n        }\n      }\n    } else if (value === \"+\") {\n      if (this.state.animation === false) {\n        if (this.state.left >= -1440) {\n          this.setState({ animation: true }, () => {\n            let move = this.state.left - 700;\n            this.setNewPosition(move);\n          });\n        }\n      }\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"main-container\">\n          <div className=\"slider-container\">\n            <ul className=\"slider-list\">\n              <SliderImage image=\"./images/colorado.jpg\" />\n              <SliderImage image=\"./images/sunrise.jpg\" />\n              <SliderImage image=\"./images/monte-vista.jpg\" />\n              <SliderImage image=\"./images/medium.jpg\" />\n            </ul>\n          </div>\n\n          <div className=\"button-group\">\n            <Button\n              value=\" &#171;\"\n              update={this.updateSlider.bind(this)}\n              returnValue=\"-\"\n              buttonClass=\"button-left\"\n            />\n            <Button\n              value=\"&#187;\"\n              update={this.updateSlider.bind(this)}\n              returnValue=\"+\"\n              buttonClass=\"button-right\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}